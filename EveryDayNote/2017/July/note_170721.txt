复习java基础

成员变量和局部变量的区别：
  1.定义的位置不同
    成员变量定义在类中，可以被整个类访问，
    局部变量定义在方法中，只能在方法中使用。
  2.生命周期不同
    成员变量随着对象的创建而产生，随着对象的消失而消失，存在于堆内存中，
    局部变量随着方法的加载进入栈内存中，随着方法的出栈而消失。
  3.默认值不同
    成员变量有默认的初始值，局部变量没有，必须先赋值，再使用
  4.存储位置不同
    成员变量存储在堆内存的对象中
    局部变量存储在栈内存的方法中
  使用变量时遵循就近原则。

成员变量和静态变量的区别：
  成员变量：
  静态变量：(类变量)由static修饰的变量称为静态变量，实际上就是一个全局的变量。如果某内容是被所有的对象所共享
         那么就应该使用静态修饰，没有被静态修饰的实际上属于对象的特殊描述。
         不同的对象实例分配到不同的内存空间，如果类中的成员变量有类变量，那么所有对象的这个静态变量分配在同一
         个内存，改变这个类变量的值，所有的对象访问的时候这个值都会发生改变，也就是对象共享类变量
  区别：
    1.生命周期不同
      成员变量随着对象的创建而存在，随着对象的消失而释放
      静态变量随着类的加载而存在，随着类的消失而消失
    2.调用方式不同
      成员变量只能被对象调用
      静态变量既可以被对象实例调用，也可以直接被类名调用
    3.别名不同
      成员变量又叫实例变量
      类变量又叫静态变量
    4.数据存储位置不同
      成员变量存储在堆内存的对象中，，所以也叫对象的特有数据
      静态变量存在于方法区(共享数据区)的静态区，所以也叫对象的共享数据

代码块：
  普通代码块：
    每一个方法的大括号就是一个普通代码块
  静态代码块：
    使用static关键字修饰的代码块，用于初始化类，给类的属性初始化，每个静态代码块只能执行一次
      JVM在加载类的时候就会执行静态代码块，所以静态代码块先于main方法执行
      如果一个类中包含多个静态代码块，那么先定义的先执行
      静态代码块不能存在于任何方法体内，也不能访问任何静态变量和静态方法，需要通过类的实例进行访问
  构造代码块：
    直接定义在类中且没有加static关键字的代码块称为构造代码块，在创建对象的时候进行调用，
    每创建一个对象就执行一次构造代码块，先于构造函数执行
  同步代码块：
    一般出现在多线程中

代码块的执行顺序

  静态代码块 -> main方法 -> 构造代码块 -> 构造方法

    静态代码块可以加载一些库函数和配置文件等
    main方法是程序的入口
    构造代码块是构造方法中的共性的内容，将不同的构造方法中相同的抽取
    构造方法是对象创建的方法，每创建一个对象就会执行一次，
    构造代码块在编译的时候分配给了每一个构造函数，所以每创建一个对象，构造代码块也执行一次

java中容易忘记的知识点
