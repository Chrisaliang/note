今日内容：梳理高德地图导航，完成逻辑设计，有余力时更进一步

/*    // 定义marker的监听事件
       AMap.OnMarkerClickListener markerClickListener = new AMap.OnMarkerClickListener() {
           // return true表示响应该事件
           @Override
           public boolean onMarkerClick(Marker marker) {

               System.out.println(marker.getId());

               Log.i(TAG, "开始导航");

               beginNavi(marker);

               Log.i(TAG, "已调用导航代码");

               return true;
           }
       };
//        aMap.setOnMarkerClickListener(markerClickListener);*/

  private void beginNavi(Marker marker) {




      final NaviLatLng startLatlng = new NaviLatLng(mAMapLocation.getLatitude(), mAMapLocation.getLongitude());
      final NaviLatLng endLatlng = new NaviLatLng(marker.getPosition().latitude, marker.getPosition().longitude);

      // 获取mAMapNavi的实例
      mAMapNavi = AMapNavi.getInstance(getApplicationContext());
      // 添加监听
      mAMapNavi.addAMapNaviListener(new AMapNaviListener() {
          @Override
          public void onInitNaviFailure() {
              Log.i(TAG, "初始化失败");
          }

          @Override
          public void onInitNaviSuccess() {
              Log.i(TAG, "这里的代码只执行一次");
              mAMapNavi.calculateWalkRoute(startLatlng, endLatlng);
          }

          @Override
          public void onStartNavi(int i) {
              Log.i(TAG, "开始导航" + i);
          }

          @Override
          public void onTrafficStatusUpdate() {     }

          @Override
          public void onLocationChange(AMapNaviLocation aMapNaviLocation) {
              Log.i(TAG, "位置发生变化");
          }

          @Override
          public void onGetNavigationText(int i, String s) {
              Log.i(TAG, "获取导航文本" + i + "..." + s);
          }

          @Override
          public void onEndEmulatorNavi() {

          }

          @Override
          public void onArriveDestination() {
              Log.i(TAG, "到达目的地");
          }

          @Override
          public void onCalculateRouteFailure(int i) {
              Log.i(TAG, "计算路径失败" + i);
              Log.i(TAG, "重新计算");
              mAMapNavi.calculateWalkRoute(startLatlng, endLatlng);
          }

          @Override
          public void onReCalculateRouteForYaw() {
              Log.i(TAG, "开始计算路线");
              Log.i(TAG, "重新计算");
              mAMapNavi.calculateWalkRoute(startLatlng, endLatlng);
          }

          @Override
          public void onReCalculateRouteForTrafficJam() {
              Log.i(TAG, "重新计算");
              mAMapNavi.calculateWalkRoute(startLatlng, endLatlng);
          }

          @Override
          public void onArrivedWayPoint(int i) {

          }

          @Override
          public void onGpsOpenStatus(boolean b) {

          }

          @Override
          public void onNaviInfoUpdate(NaviInfo naviInfo) {

          }

          @Override
          public void onNaviInfoUpdated(AMapNaviInfo aMapNaviInfo) {

          }

          @Override
          public void updateCameraInfo(AMapNaviCameraInfo[] aMapNaviCameraInfos) {

          }

          @Override
          public void onServiceAreaUpdate(AMapServiceAreaInfo[] aMapServiceAreaInfos) {

          }

          @Override
          public void showCross(AMapNaviCross aMapNaviCross) {

          }

          @Override
          public void hideCross() {

          }

          @Override
          public void showLaneInfo(AMapLaneInfo[] aMapLaneInfos, byte[] bytes, byte[] bytes1) {

          }

          @Override
          public void hideLaneInfo() {

          }

          @Override
          public void onCalculateRouteSuccess(int[] ints) {
              // 路线计算成功
              Log.i(TAG, "路线计算成功:" + ints.length);
          }

          @Override
          public void notifyParallelRoad(int i) {

          }

          @Override
          public void OnUpdateTrafficFacility(AMapNaviTrafficFacilityInfo aMapNaviTrafficFacilityInfo) {

          }

          @Override
          public void OnUpdateTrafficFacility(AMapNaviTrafficFacilityInfo[] aMapNaviTrafficFacilityInfos) {

          }

          @Override
          public void OnUpdateTrafficFacility(TrafficFacilityInfo trafficFacilityInfo) {

          }

          @Override
          public void updateAimlessModeStatistics(AimLessModeStat aimLessModeStat) {

          }

          @Override
          public void updateAimlessModeCongestionInfo(AimLessModeCongestionInfo aimLessModeCongestionInfo) {

          }

          @Override
          public void onPlayRing(int i) {

          }
      });
    }





   /* private void getMarkByLatPoint(LatLonPoint lonPoint) {
        GeocodeSearch geocodeSearch = new GeocodeSearch(this);
        geocodeSearch.setOnGeocodeSearchListener(new GeocodeSearch.OnGeocodeSearchListener() {
            @Override
            public void onRegeocodeSearched(RegeocodeResult regeocodeResult, int i) {
                //haha
            }

            @Override
            public void onGeocodeSearched(GeocodeResult geocodeResult, int i) {
                List<GeocodeAddress> geocodeAddressList = geocodeResult.getGeocodeAddressList();
                System.out.println(geocodeAddressList);
            }
        });

        RegeocodeQuery query = new RegeocodeQuery(lonPoint, 200, GeocodeSearch.AMAP);
        geocodeSearch.getFromLocationAsyn(query);
    }*/

    /**
     * 搜索定位点附近的POI
     *
     * @param latLng 定位点
     */
   /* private void doSearchQuery(LatLng latLng) {
        // 实现地图选点功能
        int currentPage = 0;
        // 第一个参数表示搜索字符串，第二个参数表示poi搜索类型，第三个参数表示poi搜索区域（空字符串代表全国）
        //PoiSearch.Query query = new PoiSearch.Query("店铺|餐饮|服务|购物|生活|住宿|汽车|休闲|保健|旅游", "", "深圳");
        //第一、二参数为空串好像是搜索所有能搜到的内容
        PoiSearch.Query query = new PoiSearch.Query("", "", "洪山");
        query.setPageSize(30);
        query.setPageNum(currentPage);
        query.setCityLimit(true);

        PoiSearch poiSearch = new PoiSearch(this, query);
        LatLonPoint latLonPoint = new LatLonPoint(latLng.latitude, latLng.longitude);
        // 设置查询范围，经纬度、半径、是否从近到远排序，默认是
        poiSearch.setBound(new PoiSearch.SearchBound(latLonPoint, 2000, true));
        // 设置监听，获取搜索结果
        poiSearch.setOnPoiSearchListener(new PoiSearch.OnPoiSearchListener() {
            @Override
            public void onPoiSearched(PoiResult poiResult, int i) {
                if (i == 1000) {
                    ArrayList<PoiItem> poiItems = poiResult.getPois();
                    for (int j = 0; j < poiItems.size(); j++) {
                        Log.d(TAG, "onPoiSearched: Title=" + poiItems.get(j).getTitle());
                        Log.d(TAG, "onPoiSearched: getSnippet=" + poiItems.get(j).getSnippet());
                        Log.d(TAG, "onPoiSearched: getSnippet=" + poiItems.get(j).getDistance() + "m");
                    }
                }
            }

            @Override
            public void onPoiItemSearched(PoiItem poiItem, int i) {

            }
        });
        poiSearch.searchPOIAsyn();

    }*/



    //        aMap.setLocationSource(new LocationSource() {
//            @Override
//            public void activate(OnLocationChangedListener onLocationChangedListener) {
//                listener = onLocationChangedListener;
//            }
//
//            @Override
//            public void deactivate() {
//            }
//        });
//        uiSettings.setZoomPosition(500);
//        uiSettings.setLogoPosition(100);


private AMapLocationListener locationListener = new AMapLocationListener() {
  @Override
  public void onLocationChanged(AMapLocation aMapLocation) {
      if (aMapLocation != null) {
//                listener.onLocationChanged(aMapLocation);
          if (aMapLocation.getErrorCode() == 0) {
              mAMapLocation = aMapLocation;

              //定位成功
              // 设置缩放级别
              aMap.moveCamera(CameraUpdateFactory.zoomTo(18));
              // 将地图移动到当前定位点
              aMap.moveCamera(CameraUpdateFactory.changeLatLng(
                      new LatLng(aMapLocation.getLatitude(), aMapLocation.getLongitude())));

              int locationType = aMapLocation.getLocationType();// 获取当前定位结果来源，如网络定位
              double latitude = aMapLocation.getLatitude();// 获取纬度
              double longitude = aMapLocation.getLongitude();// 获取经度
              float accuracy = aMapLocation.getAccuracy();// 获取精度信息
              double altitude = aMapLocation.getAltitude(); // 获取海拔信息
              float speed = aMapLocation.getSpeed(); // 获取速度信息
              float bearing = aMapLocation.getBearing(); // 获取方向角
              String buildingId = aMapLocation.getBuildingId(); // 获取建筑物的id信息
              String floor = aMapLocation.getFloor(); // 获取楼层信息
              SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
              Date date = new Date(aMapLocation.getTime());
              df.format(date);//定位时间
              String address = aMapLocation.getAddress();
              String country = aMapLocation.getCountry();
              String province = aMapLocation.getProvince();
              String city = aMapLocation.getCity();
              String district = aMapLocation.getDistrict();
              String street = aMapLocation.getStreet();
              String streetNum = aMapLocation.getStreetNum();
              String cityCode = aMapLocation.getCityCode();
              String adCode = aMapLocation.getAdCode();
              String aoiName = aMapLocation.getAoiName();


              Log.w(TAG, "location msg:\n " +
                      "locationType:" + locationType +
                      "\n" +
                      " latitude:" + latitude +
                      "\n" +
                      " longitude:" + longitude +
                      "\n" +
                      " accuracy:" + accuracy);


              // 通过输入车辆的经纬度值获取所在地图位置
//        getMarkerByPosition(new LatLng(30.60009387, 114.23583984));
//        getMarkerByPosition(new LatLng(30.499514, 114.41385));
              getMarkerByPosition(new LatLng(30.60009387, 114.23583984));
          }
      } else {
          //显示错误信息ErrCode是错误码，errInfo是错误信息，详见错误码表。
          Log.e("AmapError", "location Error, ErrCode:"
                  + aMapLocation.getErrorCode() + ", errInfo:"
                  + aMapLocation.getErrorInfo());
      }
  }
};


开始自定义view编写车辆检测页面
